# -*- coding: utf-8 -*-
"""Health_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xM0IftdFbyBLHAWlR7KKgQ_7DtCD1xdh
"""

# Install required packages
!pip install -q transformers accelerate gradio sentencepiece bitsandbytes huggingface_hub

# Import libraries
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
from huggingface_hub import notebook_login
import torch
import gradio as gr

# ======================
# STEP 1: AUTHENTICATION
# ======================
# Run this cell and paste your Hugging Face token when prompted
notebook_login()

# ======================
# STEP 2: MODEL SETUP
# ======================
MODEL_NAME = "ibm-granite/granite-3.3-2b-instruct"

# Configure 4-bit quantization for efficient inference
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.float16
)

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    quantization_config=bnb_config,
    device_map="auto",
    trust_remote_code=True
)

# ======================
# STEP 3: CORE FUNCTIONS
# ======================
def generate_response(prompt, max_new_tokens=512):
    inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
    outputs = model.generate(**inputs, max_new_tokens=max_new_tokens)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

def symptoms_identifier(symptoms):
    prompt = f"""As an advanced medical AI, analyze these symptoms and suggest possible conditions:

Patient Symptoms: {symptoms}

Possible Conditions (list 2-3 with brief explanations):
1."""
    response = generate_response(prompt)
    return response.split("Possible Conditions:")[-1].strip()

def home_remedies(disease):
    prompt = f"""Provide safe, evidence-based home remedies for {disease}:

Recommended Natural Remedies:
-"""
    response = generate_response(prompt)
    return response.split("Recommended Natural Remedies:")[-1].strip()

def medication(disease):
    prompt = f"""Suggest medical treatments for {disease} (include disclaimer):

Medical Guidance (ALWAYS consult a doctor first):
-"""
    response = generate_response(prompt)
    return response.split("Medical Guidance:")[-1].strip()

def patient_chatbot(disease):
    prompt = f"""Explain {disease} to a patient in simple terms:

What is {disease}?
- Definition:
- Common Symptoms:
- When to See a Doctor:"""
    response = generate_response(prompt)
    return response.split("What is")[-1].strip()

# ======================
# STEP 4: GRADIO INTERFACE
# ======================
with gr.Blocks(theme=gr.themes.Soft(), title="HealthAI - Medical Assistant") as app:
    gr.Markdown("""
    # ü©∫ HealthAI - IBM Granite-Powered Medical Assistant
    *Professional medical guidance at your fingertips*
    """)

    with gr.Tabs():
        with gr.Tab("üîç Symptom Analysis"):
            gr.Markdown("### Describe your symptoms")
            symptom_input = gr.Textbox(label="Symptoms", placeholder="e.g., fever lasting 3 days, headache, fatigue")
            analyze_btn = gr.Button("Analyze")
            diagnosis_output = gr.Textbox(label="Possible Conditions", lines=5)
            gr.Examples(
                [["headache, nausea, sensitivity to light"],
                 ["fever, sore throat, swollen glands"]],
                symptom_input
            )

        with gr.Tab("üåø Home Remedies"):
            gr.Markdown("### Get natural treatment options")
            remedy_input = gr.Textbox(label="Condition", placeholder="e.g., common cold, mild burns")
            remedy_btn = gr.Button("Get Remedies")
            remedy_output = gr.Textbox(label="Recommended Remedies", lines=5)

        with gr.Tab("üíä Medication Guide"):
            gr.Markdown("### Treatment information (consult doctor)")
            med_input = gr.Textbox(label="Condition", placeholder="e.g., high blood pressure")
            med_btn = gr.Button("Get Medical Advice")
            med_output = gr.Textbox(label="Treatment Options", lines=5)

        with gr.Tab("üí¨ Disease Information"):
            gr.Markdown("### Learn about any health condition")
            info_input = gr.Textbox(label="Condition", placeholder="e.g., diabetes, asthma")
            info_btn = gr.Button("Explain")
            info_output = gr.Textbox(label="Detailed Information", lines=7)

    # Connect functions to UI
    analyze_btn.click(symptoms_identifier, inputs=symptom_input, outputs=diagnosis_output)
    remedy_btn.click(home_remedies, inputs=remedy_input, outputs=remedy_output)
    med_btn.click(medication, inputs=med_input, outputs=med_output)
    info_btn.click(patient_chatbot, inputs=info_input, outputs=info_output)

    # Enhanced disclaimer
    gr.Markdown("""
    <div style='background:#ffebee; padding:15px; border-radius:5px;'>
    <h4 style='color:#c62828;'>‚ö†Ô∏è Important Medical Disclaimer</h4>
    <p>1. This AI provides general health information, not medical advice<br>
    2. Always consult a qualified healthcare professional for diagnosis<br>
    3. Never disregard professional advice or delay treatment based on AI content<br>
    4. In emergencies, call local emergency services immediately</p>
    </div>
    """)

# Launch the application
app.launch(share=True, debug=True)